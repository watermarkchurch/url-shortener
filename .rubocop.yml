inherit_from: .rubocop_todo.yml

require:
  - rubocop-rspec
  - rubocop-performance

AllCops:
  DisplayCopNames: true
  NewCops: enable
  Exclude:
    # generated by rails/binstubs
    - '**/bin/**/*'

    # auto generated by rails
    - 'db/migrate/**/*'
    - 'db/schema.rb'
    - 'db/seeds.rb'

    # generated by guard
    - 'Guardfile'
    - 'Dangerfile'

    # 3rd party
    - 'vendor/**/*'
    - 'node_modules/**/*'

    # No need to lint the spec dummy
    - '**/spec/dummy/**/*'

    # Gems have their own config
    - 'gems/**/*'

    - 'tmp/**/*'

Layout/ArgumentAlignment:
  EnforcedStyle: with_fixed_indentation

Layout/FirstHashElementIndentation:
  EnforcedStyle: consistent

Layout/HashAlignment:
  # allow coder to get around alignment rules by explicitly defining the hash param
  EnforcedLastArgumentHashStyle: ignore_explicit

Layout/LineLength:
  Max: 120

Layout/MultilineMethodCallIndentation:
  EnforcedStyle: indented

Layout/MultilineOperationIndentation:
  EnforcedStyle: indented

Layout/FirstMethodArgumentLineBreak:
  Enabled: false

Lint/AssignmentInCondition:
  Enabled: false

Metrics/BlockLength:
  CountAsOne:
    - array
    - hash
    - heredoc
  AllowedMethods:
    # ActiveSupport::Concern methods
    - included
    - class_methods
  Exclude:
    # config files where we expect long blocks
    - 'Gemfile'
    - 'config/**/*.rb'
    # spec files that might have a big describe
    - 'spec/**/*.rb'
    - 'regression/**/*.rb'
    # rake tasks where the task is a block
    - 'lib/tasks/**/*.rake'
    # jbuilder DSL files
    - '**/*.jbuilder'
    - '**/*.builder'
    # big "included" or "aasm" blocks
    - '**/concerns/*.rb'

Metrics/AbcSize:
  Max: 20
  Exclude:
    # spec files, especially matchers, can get complicated and that's OK
    - 'spec/**/*.rb'
    - 'regression/**/*.rb'

Metrics/ClassLength:
  Max: 120
  CountAsOne:
    - array
    - hash
    - heredoc

Metrics/CyclomaticComplexity:
  Max: 10

Metrics/MethodLength:
  Max: 15
  CountAsOne:
    - array
    - hash
    - heredoc
  Exclude:
    # spec files, especially matchers, can get complicated and that's OK
    - 'spec/**/*.rb'
    - 'regression/**/*.rb'

Metrics/PerceivedComplexity:
  Max: 10
  
Naming/FileName:
  Exclude:
    # view spec names ought to match the view names, regardless of casing
    - 'spec/views/**/*.rb'

Naming/MemoizedInstanceVariableName:
  EnforcedStyleForLeadingUnderscores: optional
  Exclude:
    # Controllers often use "load_" methods in before filters.
    - 'app/controllers/**/*_controller.rb'

# Allow the developer to provide better clarity in predicate names as necessary
Naming/PredicateName:
  Enabled: false

# Allow `rescue_from with: :render_404`
Naming/VariableNumber:
  Enabled: false
  
# Specs don't care about performance
Performance:
  Exclude:
    - 'spec/**/*.rb'
    - 'regression/**/*.rb'

RSpec/DescribedClass:
  Enabled: false

RSpec/ExampleLength:
  Max: 25
  CountAsOne:
    - array
    - hash
    - heredoc

# Don't want this to be autocorrected during developer's workflow.  We check this in CircleCI instead.
RSpec/Focus:
  Enabled: false

# We're fine with multiple Expectations, we just don't want multiple Actions (or very rarely).
RSpec/MultipleExpectations:
  Enabled: false

RSpec/MultipleMemoizedHelpers:
  Enabled: false

RSpec/NamedSubject:
  EnforcedStyle: named_only

# We prefer "to_not" as a readability preference
RSpec/NotToNot:
  EnforcedStyle: to_not
  
RSpecRails:
  Enabled: false

Style/Alias:
  Enabled: true
  EnforcedStyle: prefer_alias_method

Style/BlockDelimiters:
  Exclude:
    # we like the `let(:foo) {}` syntax in specs
    - 'spec/**/*.rb'
    - 'regression/**/*.rb'

# Sometimes you gotta declare the module first so it gets defined before it's used
Style/ClassAndModuleChildren:
  Enabled: false

Style/Copyright:
  Enabled: false

Style/Documentation:
  Enabled: false

Style/DocumentationMethod:
  Enabled: false

Style/EmptyMethod:
  EnforcedStyle: expanded

Style/FormatStringToken:
  EnforcedStyle: template
  
Style/HashSyntax:
  EnforcedStyle: ruby19_no_mixed_keys
  EnforcedShorthandSyntax: never
  
Style/Lambda:
  EnforcedStyle: literal

# The dev can decide this on a case-by-case basis for readability
Style/MethodCallWithArgsParentheses:
  Enabled: false

Style/MissingElse:
  EnforcedStyle: both
  SupportedStyles:
    # if - warn when an if expression is missing an else branch
    # case - warn when a case expression is missing an else branch
    # both - warn when an if or case expression is missing an else branch
    - if
    - case
    - both

Style/MultilineBlockChain:
  Exclude:
    # allow "expect { }.to raise_error { }"
    - 'spec/**/*.rb'

# I think 'x == 0' is more readable than 'x.zero?'
Style/NumericPredicate:
  Enabled: false

Style/OpenStructUse:
  Exclude:
    # wcc-contentful creates some openstructs so we need to be able to use it in tests
    - 'spec/**/*'
    - 'regression/**/*.rb'

Style/RegexpLiteral:
  EnforcedStyle: slashes
  AllowInnerSlashes: true

Style/Send:
  Enabled: true
  Exclude:
   # It's nice to use non-public methods in specs sometimes
   - 'spec/**/*'
   - 'regression/**/*.rb'
